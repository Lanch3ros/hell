#BlueJ class context
comment0.target=SilkRoad
comment0.text=\n\ Representa\ una\ carretera\ lineal\ de\ longitud\ fija\ (0\ hasta\ length-1)\ en\ la\ que\ se\ pueden\n\ ubicar\ tiendas\ (stores)\ y\ robots.\ Cada\ tienda\ tiene\ un\ "tenge"\ inicial\ (stock).\ \n\ Los\ robots\ pueden\ moverse\ a\ lo\ largo\ de\ la\ carretera\ y\ tienen\ el\ profit\ de\ cada\ uno.\n\ \n\ Reglas\ principales\:\n\ No\ se\ permite\ ubicar\ tienda\ y\ robot\ en\ la\ misma\ posici\u00F3n.\n\ Al\ mover\ un\ robot,\ si\ termina\ exactamente\ sobre\ una\ tienda\ con\ stock\ lo\ recoge,\n\ el\ profit\ se\ calcula\ la\ ganancia\ como\ (stockActual\ -\ distanciaRecorrida)\n\ \n\ El\ campo\ ok\ indica\ si\ la\ \u00FAltima\ operaci\u00F3n\ ejecutada\ fue\ exitosa.\n\n
comment1.params=length
comment1.target=SilkRoad(java.lang.Integer)
comment1.text=\ Crea\ una\ nueva\ instancia\ de\ la\ clase\ SilkRoad\ (constructor)\n\ \ \ @param\ length\ longitud\ de\ la\ carretera\ (length\ >\ 0)\n
comment10.params=location
comment10.target=void\ removeRobot(java.lang.Integer)
comment10.text=\n\ Elimina\ el\ robot\ ubicado\ exactamente\ en\ location\n\ @param\ location\ posici\u00F3n\ del\ robot\ a\ eliminar\n
comment11.params=location\ meters
comment11.target=void\ moveRobot(java.lang.Integer,\ java.lang.Integer)
comment11.text=\n\ Mueve\ el\ robot\ desde\ su\ orogen\ location\ a\ una\ cantidad\ de\ metros\ dados\n\ Si\ al\ finalizar\ el\ movimiento\ el\ robot\ cae\ exactamente\ en\ una\ tienda\ con\ stock\ entonces\ recoge\ todo\ dejando\ tenge\ en\ 0,\n\ el\ profit\ se\ calcula\ como\ la\ ganancia\ (stockActual\ -\ distanciaRecorrida)\n\n\ @param\ location\ origen\ del\ robot\ a\ mover\ (identifica\ al\ robot)\n\ @param\ meters\ desplazamiento\ (puede\ ser\ negativo)\n
comment12.params=
comment12.target=void\ resupplyStores()
comment12.text=\n\ Restablece\ el\ stock\ actual\ de\ todas\ las\ tiendas\ a\ su\ tenge\ inicial\n
comment13.params=
comment13.target=void\ returnRobots()
comment13.text=\n\ Retorna\ cada\ robot\ a\ su\ posici\u00F3n\ de\ origen\ (posicionActual\ \=\ origen)\n
comment14.params=
comment14.target=void\ reboot()
comment14.text=\n\ Restablece\ el\ sistema\:\ reabastece\ tiendas,\ retorna\ robots\ y\ pone\ la\ ganancia\ en\ 0\n
comment15.params=
comment15.target=void\ finish()
comment15.text=\n\ Finaliza\ la\ simulaci\u00F3n\:\ elimina\ todas\ las\ tiendas\ y\ robots,\ y\ pone\ la\ ganancia\ en\ 0\n
comment16.params=
comment16.target=java.lang.Integer\ profit()
comment16.text=\n\ Devuelve\ la\ ganancia\ acumulada.\n
comment17.params=
comment17.target=java.lang.Integer[][]\ stores()
comment17.text=\n\ Devuelve\ las\ tiendas\ como\ matriz\ ordenada\ por\ ubicaci\u00F3n\n\ Cada\ fila\ es\ [ubicacion,\ tengeOriginal,\ tengeActual]\n\ retorna\ una\ matriz\ de\ tama\u00F1o\ N\ x\ 3\ o\ int[0][3]\ si\ no\ hay\ tiendas\n
comment18.params=
comment18.target=java.lang.Integer[][]\ robots()
comment18.text=\n\ Devuelve\ los\ robots\ como\ matriz\ ordenada\ por\ origen\n\ Cada\ fila\ es\ [origen,\ posicionActual,\ profitTotal]\n\ Retorna\ una\ matriz\ de\ tama\u00F1o\ N\ x\ 3\ o\ int[0][3]\ si\ no\ hay\ robots\n
comment19.params=
comment19.target=boolean\ ok()
comment19.text=Indica\ si\ la\ \u00FAltima\ operaci\u00F3n\ ejecutada\ fue\ exitosa
comment2.params=
comment2.target=void\ makeVisible()
comment20.params=
comment20.target=java.lang.Integer[][]\ emptiedStores()
comment20.text=\n\ Devuelve\ las\ tiendas\ ordenadas\ por\ localizaci\u00F3n\ con\ el\ n\u00FAmero\ de\ veces\ que\ han\ sido\ desocupadas\n\ Cada\ fila\ es\ [ubicacion,\ vecesDesocupada]\n\ retorna\ una\ matriz\ de\ tama\u00F1o\ N\ x\ 2\ o\ int[0][2]\ si\ no\ hay\ tiendas\n
comment21.params=
comment21.target=java.lang.Integer[][]\ profitPerMove()
comment21.text=\n\ Devuelve\ los\ robots\ ordenados\ por\ posici\u00F3n\ con\ sus\ ganancias\ por\ movimiento\n\ Cada\ fila\ es\ [posicion,\ ganancia1,\ ganancia2,\ ...]\n\ Retorna\ una\ matriz\ de\ tama\u00F1o\ N\ x\ (1\ +\ movimientos)\ o\ int[0][1]\ si\ no\ hay\ robots\n
comment22.params=
comment22.target=void\ moveRobots()
comment23.params=currentPos\ remaining\ visited\ accumulatedProfit\ depth
comment23.target=SilkRoad.PathResult\ findBestPath(java.lang.Integer,\ java.util.List,\ java.util.Set,\ int,\ int)
comment3.params=
comment3.target=void\ makeInvisible()
comment4.params=
comment4.target=void\ draw()
comment5.params=location\ tenge
comment5.target=void\ placeStore(java.lang.Integer,\ java.lang.Integer)
comment5.text=\n\ Intenta\ ubicar\ una\ tienda\ en\ una\ ubicacion\ dada\ y\ cantidad\ de\ tenge(recurso)\n\n\ @param\ location\ posici\u00F3n\ donde\ ubicar\ la\ tienda\ (0\ \=<\ location)\ &\ (location\ <\ length)\n\ @param\ tenge\ capacidad/stock\ inicial\ de\ la\ tienda\ (tenge\ >\=\ 0)\n\ @return\ true\ si\ se\ ubic\u00F3,\ de\ lo\ contrario\ false\n\ \ \ \ \ \ \ \ \ ej.\ fuera\ de\ rango\ de\ la\ calle,\ ya\ hay\ tienda\ o\ robot\ en\ esa\ posici\u00F3n,\ o\ tenge\ <\ 0\n\ \ \ \ \ \ \ \ \ Tambi\u00E9n\ actualiza\ el\ campo\ ok\ con\ el\ mismo\ valor\ retornado\n
comment6.params=location
comment6.target=boolean\ hasStoreInLocation(java.lang.Integer)
comment6.text=\n\ Indica\ si\ existe\ una\ tienda\ exactamente\ en\ location.\n\ @param\ location\ posici\u00F3n\ a\ consultar\n\ @return\ true\ si\ hay\ tienda\ en\ esa\ posici\u00F3n\ o\ false\ en\ caso\ contrario\n
comment7.params=location
comment7.target=void\ placeRobot(java.lang.Integer)
comment7.text=\n\ Intenta\ ubicar\ un\ robot\ en\ location\n\ @param\ location\ posici\u00F3n\ del\ robot\ (0\ \=<\ location\ y\ location\ <\ length)\n
comment8.params=location
comment8.target=boolean\ hasRobotInLocation(java.lang.Integer)
comment8.text=\n\ Indica\ si\ existe\ un\ robot\ exactamente\ en\ location\n\ @param\ location\ posici\u00F3n\ a\ consultar\n
comment9.params=location
comment9.target=void\ removeStore(java.lang.Integer)
comment9.text=\n\ Elimina\ la\ tienda\ ubicada\ exactamente\ en\ location,\ si\ existe.\n\ @param\ location\ posici\u00F3n\ de\ la\ tienda\ a\ eliminar\n
numComments=24
